// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

dependencies {
    implementation acorusCoordinates
    implementation heartCoordinates
    implementation jcommanderCoordinates
    implementation jme3utilitiesniftyCoordinates

    runtimeOnly 'com.github.nifty-gui:nifty-style-black:1.4.3'
    runtimeOnly 'org.jmonkeyengine:jme3-desktop:' + jme3Version
    runtimeOnly 'org.jmonkeyengine:jme3-lwjgl3:' + jme3Version
    implementation 'org.jmonkeyengine:jme3-terrain:' + jme3Version
    runtimeOnly 'org.jmonkeyengine:jme3-testdata:' + jme3Version

    // SkyExamples doesn't use jme3-jogg nor jme3-plugins
    //  -- they are included solely to avoid warnings from AssetConfig.
    runtimeOnly 'org.jmonkeyengine:jme3-jogg:' + jme3Version
    runtimeOnly 'org.jmonkeyengine:jme3-plugins:' + jme3Version

    // LWJGL 3.3 dependencies that were omitted from JME v3.5:
    runtimeOnly 'org.lwjgl:lwjgl:' + lwjgl3Version + ':natives-macos-arm64'
    runtimeOnly 'org.lwjgl:lwjgl-glfw:' + lwjgl3Version + ':natives-macos-arm64'
    runtimeOnly 'org.lwjgl:lwjgl-jemalloc:' + lwjgl3Version + ':natives-macos-arm64'
    runtimeOnly 'org.lwjgl:lwjgl-openal:' + lwjgl3Version + ':natives-macos-arm64'
    runtimeOnly 'org.lwjgl:lwjgl-opengl:' + lwjgl3Version + ':natives-macos-arm64'

    //implementation 'com.github.stephengold:SkyControl:' + skycontrolVersion
    implementation project(':SkyLibrary')
}

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform;
Boolean isMacOS = DefaultNativePlatform.currentOperatingSystem.isMacOsX();

tasks.withType(JavaExec) { // Java runtime options:
    if (isMacOS) {
        jvmArgs '-XstartOnFirstThread'
    } else {
        args '--showSettingsDialog'
    }
    //args '--verbose' // to enable additional log output
}

// cleanup tasks:

clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanSOs', 'cleanWrittenAssets')

task cleanDLLs(type: Delete) { // extracted Windows native libraries
    delete fileTree(dir: '.', include: '*.dll')
}
task cleanDyLibs(type: Delete) { // extracted macOSX native libraries
    delete fileTree(dir: '.', include: '*.dylib')
}
task cleanLogs(type: Delete) { // JVM crash logs
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
task cleanSOs(type: Delete) { // extracted Linux and Android native libraries
    delete fileTree(dir: '.', include: '*.so')
}
task cleanWrittenAssets(type: Delete) { // Acorus output directory
    delete 'Written Assets'
}

// tasks to run the example apps:

task CubeMapExample(type: JavaExec) {
    mainClass = 'jme3utilities.sky.test.CubeMapExample'
}
task CubeMapExampleAfter(type: JavaExec) {
    mainClass = 'jme3utilities.sky.test.CubeMapExampleAfter'
}
task TestGlobeRenderer(type: JavaExec) {
    mainClass = 'jme3utilities.sky.test.TestGlobeRenderer'
}

task debugTestSkyControl(type: JavaExec) {
    debug true
    mainClass = 'jme3utilities.sky.test.TestSkyControl'
}
task TestSkyControl(type: JavaExec) {
    mainClass = 'jme3utilities.sky.test.TestSkyControl'
}
task TestSkyControlCyclone(type: JavaExec) {
    args '-c'
    mainClass = 'jme3utilities.sky.test.TestSkyControl'
}
task TestSkyControlShadowFilter(type: JavaExec) {
    args '-f'
    mainClass = 'jme3utilities.sky.test.TestSkyControl'
}
task TestSkyControlNoCubes(type: JavaExec) {
    args '-n'
    mainClass = 'jme3utilities.sky.test.TestSkyControl'
}
task TestSkyControlSingleDome(type: JavaExec) {
    args '-s'
    mainClass = 'jme3utilities.sky.test.TestSkyControl'
}
task TestSkyControlUsage(type: JavaExec) {
    args '-u'
    mainClass = 'jme3utilities.sky.test.TestSkyControl'
}
task TestSkyControlWater(type: JavaExec) {
    args '-w'
    mainClass = 'jme3utilities.sky.test.TestSkyControl'
}

task TestSkyMaterial(type: JavaExec) {
    mainClass = 'jme3utilities.sky.test.TestSkyMaterial'
}
