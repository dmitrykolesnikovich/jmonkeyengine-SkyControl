// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

dependencies {
    implementation acorusCoordinates
    implementation heartCoordinates
    implementation jcommanderCoordinates
    implementation jme3utilitiesniftyCoordinates

    runtimeOnly 'com.github.nifty-gui:nifty-style-black:1.4.3'
    runtimeOnly 'org.jmonkeyengine:jme3-desktop:' + jme3Version
    runtimeOnly 'org.jmonkeyengine:jme3-lwjgl3:' + jme3Version
    implementation 'org.jmonkeyengine:jme3-terrain:' + jme3Version
    runtimeOnly 'org.jmonkeyengine:jme3-testdata:' + jme3Version

    // SkyExamples doesn't use jme3-jogg nor jme3-plugins
    //  -- they are included solely to avoid warnings from AssetConfig.
    runtimeOnly 'org.jmonkeyengine:jme3-jogg:' + jme3Version
    runtimeOnly 'org.jmonkeyengine:jme3-plugins:' + jme3Version

    //implementation 'com.github.stephengold:SkyControl:' + skycontrolVersion
    implementation project(':SkyLibrary')
}

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform;
Boolean isMacOS = DefaultNativePlatform.currentOperatingSystem.isMacOsX();

tasks.withType(JavaExec) { // Java runtime options:
    if (isMacOS) {
        jvmArgs '-XstartOnFirstThread'
    } else {
        args '--showSettingsDialog'
    }
    //args '--verbose' // to enable additional log output
}

// cleanup tasks:

clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanSOs', 'cleanWrittenAssets')

tasks.register('cleanDLLs', Delete) { // extracted Windows native libraries
    delete fileTree(dir: '.', include: '*.dll')
}
tasks.register('cleanDyLibs', Delete) { // extracted macOSX native libraries
    delete fileTree(dir: '.', include: '*.dylib')
}
tasks.register('cleanLogs', Delete) { // JVM crash logs
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
tasks.register('cleanSOs', Delete) { // extracted Linux and Android native libraries
    delete fileTree(dir: '.', include: '*.so')
}
tasks.register('cleanWrittenAssets', Delete) { // Acorus output directory
    delete 'Written Assets'
}

// tasks to run the example apps:

tasks.register('CubeMapExample', JavaExec) {
    mainClass = 'jme3utilities.sky.test.CubeMapExample'
}
tasks.register('CubeMapExampleAfter', JavaExec) {
    mainClass = 'jme3utilities.sky.test.CubeMapExampleAfter'
}
tasks.register('TestGlobeRenderer', JavaExec) {
    mainClass = 'jme3utilities.sky.test.TestGlobeRenderer'
}

tasks.register('debugTestSkyControl', JavaExec) {
    debug true
    mainClass = 'jme3utilities.sky.test.TestSkyControl'
}
tasks.register('TestSkyControl', JavaExec) {
    mainClass = 'jme3utilities.sky.test.TestSkyControl'
}
tasks.register('TestSkyControlCyclone', JavaExec) {
    args '-c'
    mainClass = 'jme3utilities.sky.test.TestSkyControl'
}
tasks.register('TestSkyControlShadowFilter', JavaExec) {
    args '-f'
    mainClass = 'jme3utilities.sky.test.TestSkyControl'
}
tasks.register('TestSkyControlNoCubes', JavaExec) {
    args '-n'
    mainClass = 'jme3utilities.sky.test.TestSkyControl'
}
tasks.register('TestSkyControlSingleDome', JavaExec) {
    args '-s'
    mainClass = 'jme3utilities.sky.test.TestSkyControl'
}
tasks.register('TestSkyControlUsage', JavaExec) {
    args '-u'
    mainClass = 'jme3utilities.sky.test.TestSkyControl'
}
tasks.register('TestSkyControlWater', JavaExec) {
    args '-w'
    mainClass = 'jme3utilities.sky.test.TestSkyControl'
}

tasks.register('TestSkyMaterial', JavaExec) {
    mainClass = 'jme3utilities.sky.test.TestSkyMaterial'
}
